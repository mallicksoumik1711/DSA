Here there are two functions optomal and normal i.e.

int fruitBasket(vector<int> &nums){
    unordered_map<int, int> mpp;
    int maxi = INT_MIN;
    int l=0, r=0;
    while(r < nums.size()){
        mpp[nums[r]] += 1;
        while(mpp.size() > 2){
            mpp[nums[l]] -= 1;
            if(mpp[nums[l]] == 0){
                mpp.erase(nums[l]);
            }
            l += 1;
        }
        if(mpp.size() <= 2){
            maxi = max(maxi, r-l+1);
        }
        r += 1;
    }
    return maxi;
}

int fruitBasketOptimal(vector<int> &nums){
    unordered_map<int, int> mpp;
    int maxi = INT_MIN;
    int l=0, r=0;
    while(r < nums.size()){
        mpp[nums[r]] += 1;
        if(mpp.size() > 2){
            mpp[nums[l]] -= 1;
            if(mpp[nums[l]] == 0){
                mpp.erase(nums[l]);
            }
            l += 1;
        }
        if(mpp.size() <= 2){
            maxi = max(maxi, r-l+1);
        }
        r += 1;
    }
    return maxi;
}

both are nearly same. 

tc of fruitBasket - O(2N) not n*n
tc of optimal = o(N)
